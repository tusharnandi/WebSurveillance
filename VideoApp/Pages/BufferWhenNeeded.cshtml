@page "/BufferWhenNeeded"
@model VideoApp.Pages.BufferWhenNeededModel
@{
}
<style>
	#st-video {
	  position: relative;
	  width: 70%;
	  height: 70%;
	}

</style>
<div>Work in progress...</div>

 <div class="row">
	<div class="col-8 border border-dark" style="height: 85vh;">
			<video id="st-video" playsinline autoplay controls></video>
        </div>

        <div class="col-3" style="height: 85vh;">
		<div class="border border-dark">
			<button class="btn btn-info logclean">Clear Log</button>
        </div>
		<div class="border border-info">
			<div class="log overflow-auto" style="max-height: 400px;"></div>
		</div>  
        </div>
    </div>
    <script>

        const mediaPlayer = document.querySelector("#st-video");
        let seq=0;
        const assetURL ="https://localhost:7031/api/StreamReader/file/"; //"Recording-1.webm"; // "sample.webm";
        const mimeCodec = 'video/webm; codecs="vp9"';


        var segmentLength = 0;     // content-length in bytes ... get from backend
        var segmentDuration = 0;   // total duration in second ... get from backend each segment x-segment-duration 
        var segmentTotal=0;        // total segment available ....get from backend x-segment-max

        var mediaSource = null;
        if ('MediaSource' in window && MediaSource.isTypeSupported(mimeCodec)) 
        {
            mediaSource = new MediaSource;
            mediaPlayer.src = URL.createObjectURL(mediaSource);
            mediaSource.addEventListener('sourceopen', sourceOpen);
        }
        else {
            console.error('Unsupported MIME type or codec: ', mimeCodec);
        }

        var sourceBuffer = null;
        function sourceOpen (_) 
        {
            sourceBuffer = mediaSource.addSourceBuffer(mimeCodec);
        
            // Set first sequence
            seq=1;
            
            fetchRange(assetURL+seq, appendSegment);

            mediaSource.duration = +Infinity;

            mediaPlayer.addEventListener('timeupdate', checkBuffer);
          
            mediaPlayer.addEventListener('canplay', function (){
                log(`canplay: segmentDuration: ${segmentDuration}, segmentLength:${segmentLength}`);
                mediaPlayer.play();
            });
                
            //mediaPlayer.addEventListener('seeking', seek);
        };

        //function getFileLength (url, cb) {
        //    log(`getFileLength: ${url}`);
        //    var xhr = new XMLHttpRequest;
        //    xhr.open('head', url);
        //    xhr.onload = function () {          
        //        cb(xhr.getResponseHeader('content-length'));
        //    };
        //    xhr.send();
        //};

        function fetchRange (url,cb) {

            log(`fetchRange: ${url}`);

            var xhr = new XMLHttpRequest;
            xhr.open('get', url);
            xhr.responseType = 'arraybuffer';
            //xhr.setRequestHeader('Range', 'bytes=' + start + '-' + end);
            xhr.onload = function () {
                var curentFetchByte=xhr.getResponseHeader('content-length');
                var  duration=xhr.getResponseHeader('x-segment-duration');
                var  maxSegment = xhr.getResponseHeader('x-segment-max');
                
                segmentLength += parseInt(curentFetchByte);
                segmentDuration += parseInt(duration);

                if(maxSegment>segmentTotal){
                    segmentTotal = parseInt(maxSegment); 
                    log(`updated segmentTotal : ${segmentTotal}`);
                }
                    

                log(`fetched: ${curentFetchByte} bytes, updated segment: (length:${segmentLength}, duration:${segmentDuration})`);
                
                cb(xhr.response);
            };
            xhr.send();
        };

        function appendSegment (chunk) {
            sourceBuffer.appendBuffer(chunk);
        };

        function checkBuffer (_) {
            var currentSegment = getCurrentSegment();

            if (seq>=segmentTotal)
            { 
                log(`last segment loaded.`);

                mediaSource.endOfStream();
                mediaPlayer.removeEventListener('timeupdate', checkBuffer);
            } 
            else if (shouldFetchNextSegment(currentSegment)) 
            {
                 seq++;
                log(`fetch next chunk Seq: ${seq}, ${mediaPlayer.currentTime}`);

                fetchRange(assetURL+seq, appendSegment);
            }
        };

        function seek (e) {
            console.log(e);
            if (mediaSource.readyState === 'open') {
                sourceBuffer.abort();
                console.log(mediaSource.readyState);
            } else {
                console.log('seek but not open?');
                console.log(mediaSource.readyState);
            }
        };

        function getCurrentSegment () {
            return ((mediaPlayer.currentTime / segmentDuration) | 0) + 1;
        };

        function shouldFetchNextSegment (currentSegment) 
        {
            return mediaPlayer.currentTime > segmentDuration * currentSegment * 0.8;
        };

            //Basic
    $(".logclean").click(function () {

        $(".log").empty();

    });

    function log(message, id = 0) {
        if (id > 0) {

            //clear log for each 100 request
            if (!(id % 50)) {
                $(".log").empty();
            }

            if ($(".log").find(`#${id}`).length) {
                $(".log").find(`#${id}`).text(message);
            }
            else {
                $(".log").append(`<div id="${id}">${message}</div>`);
            }

        }
        else {
            $(".log").append(`<div>${message}</div>`);
        }

    }

    </script>