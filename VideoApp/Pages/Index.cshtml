@page
@model IndexModel
@{
    ViewData["Title"] = "Recording";
}

<style>
	#st-video {
	  position: relative;
	  width: 100%;
	  height: 100%;
	}
</style>

     
    <div class="row">
	<div class="col-8 border border-dark" style="height: 85vh;">
			<video id="st-video" autoplay muted></video>
        </div>

        <div class="col-3" style="height: 85vh;">
		<div class="border border-dark">
			<button class="btn btn-primary start-camera">Start Camera</button>
			<button class="btn btn-success start-record">Start Recording</button>
			<button class="btn btn-danger stop-record">Stop Recording</button>
			<button class="btn btn-warning settings">Settings</button>
			<button class="btn btn-info logclean">Clear Log</button>
        </div>
		<div class="border border-primary">
			<ul class="list-group devicelist"></ul>
		</div>
		<div class="border border-info">
			
			<div class="log overflow-auto" style="max-height: 400px;"></div>
		</div>  
        </div>
    </div>

<script>
    let cameraList =[];
    let micList = [];
    let selected_camera;
    let selected_mic;

    let st_video =  document.querySelector("#st-video");

    let stream_server_url = "@Model.StreamingServerURL";
    let rq = "@Model.Id";
    let camera_stream = null;
    let media_recorder = null;
    let blobs_recorded = [];

    let is_first_data = false;
    let is_last_data = false;
    let data_sequence = 0;
    let recording_count = 0;

    let lock_data;
    let approval=false;
    let identical_count=0;
	let ROTATE_MAX=10;
	let ROTATE_AUTOMATION=false;

	$(".start-camera").click(async function () {
	
		try {
			const videoConstraints = {
				deviceId: { exact: selected_camera.id }
			};
			camera_stream = await navigator.mediaDevices.getUserMedia({ video: videoConstraints, audio: true });

			st_video.srcObject = camera_stream;
			$(".start-camera").hide();
			$(".start-record").show();
			

			log("camera ready");
		}
		catch (error) {
			log("camera doesnot not ready");
			log(error.message);
			return;
		}
		finally {
			$(".logclean").show();
		}
	});

	$(".start-record").click(async function () {

		media_recorder = new MediaRecorder(camera_stream, { mimeType: 'video/webm' });

		media_recorder.addEventListener('dataavailable', function (e) {
			data_sequence++;
			//Push data to Server
			pushToServer(recording_count, e.data, data_sequence, is_first_data, is_last_data);

			if (is_first_data == true) {
				is_first_data = false;
			}
			if (is_last_data == true) {
				is_last_data = false;
			}

		});

		media_recorder.addEventListener('stop', function () {
			$(".start-record").show();
			$(".stop-record").hide();
		});

		media_recorder.addEventListener('start', function () {
			
			log(`Rq:${rq}`, rq);

			//rq=uuidv4();
			data_sequence = 0;
			is_first_data = true;
			is_last_data = false;
			recording_count++;

			$(".start-record").hide();
			$(".stop-record").show();

		});
		media_recorder.start(2 * 1000);

	});

	$(".stop-record").click(async function () {
		is_last_data = true;
        media_recorder.stop();
	});

    function pushToServer(attempt, data, seq, isfirst, islast) {

        log(`Sending seq:${seq}...`, seq);

        let queryString = `rq=${rq}&isfirst=${isfirst}&islast=${islast}&seq=${seq}&attempt=${attempt}`;


        let svrurl = `${stream_server_url}/upload?${queryString}`;
        fetch(svrurl, {
            method: "POST",
            body: data,
            headers: {
                "Content-Type": "multipart/form-data"
            },
            allowHTTP1ForStreamingUpload: true
        })
            .then((response) => {
                // console.log('Response:', JSON.stringify(response));
                return response.json();
            })
            .then((result) => {
                console.log('Success:', result);

                log(`Sending  seq:${seq}...done`, seq);

				if(seq==ROTATE_MAX){
					 is_last_data = true;
					 ROTATE_AUTOMATION=true;
        			 media_recorder.stop();
					
					
				}
				
				if(islast==true && ROTATE_AUTOMATION==true){
					ROTATE_AUTOMATION=false;
					$(".log").empty();
				
					log(`Next recording starting...`);
					 
					media_recorder.start(2 * 1000);
				}

            })
            .catch((error) => {
                //console.log('Error:', JSON.stringify(error));
                log(`Sending  seq:${seq}...error:${error}`, seq);
            })
            ;

    }

    let isSettingVisible=false;
    $(".settings").click(async function(){
        if (isSettingVisible){
            $(".devicelist").hide();
            isSettingVisible = false;
        }
        else{
            
            if ($(".devicelist").find('.refresh-setting').length) {
                $(".devicelist").show();
                isSettingVisible = true;
            }
            else {
                //Bind and then Show
                $(".devicelist").hide();
                $(".devicelist").empty();

                if (cameraList.length == 0 && micList.length == 0) {
                    $(".devicelist").append(`<li>Cemara not found</li>`);
                }
                else {

                    if (cameraList.length) {

                        $(".devicelist").append(`<li class="list-group-item"><strong>Camera:</strong></li>`);
                        if (cameraList.length == 1) {
                            const camera = cameraList[0];
                            $(".devicelist").append(`<li class="list-group-item">${camera.label}</li>`);
                        }
                        else {
                            $.each(cameraList, function (key, camera) {
                                $(".devicelist").append(`<li class="list-group-item"><input type="radio" name="cameraOptions" value="${key}" autocomplete="off"/>${camera.label}</li>`);
                            });
                        }

                    }
                    /*
                    if (micList.length) {
                        $(".devicelist").append(`<li class="list-group-item"><strong>Microphone:</strong></li>`);
                        if (micList.length == 1) {
                            const mic = micList[0];
                            $(".devicelist").append(`<li class="list-group-item">${mic.label}</li>`);
                        }
                        $.each(micList, function (key, mic) {
                            $(".devicelist").append(`<li class="list-group-item"><input type="radio" class="mx-3" name="micOptions" value="${key}" autocomplete="off"/>${mic.label}</li>`);
                        });
                    }*/

                }

                let apply_button = $(`<button class="btn btn-warning">Apply</button>`).on('click', function (e) {
                    
                    let cameraKey = 0;
                    if ($(`input[name="cameraOptions"]:checked`).length) {

                        cameraKey = $(`input[name="cameraOptions"]:checked`).val();
                        cameraKey = parseInt(cameraKey);
                        selected_camera = cameraList[cameraKey];
                    }

                    log("selected camera:" + cameraKey);

                    isSettingVisible = false;
                    $(".devicelist").hide();


                });
                $(".devicelist").append(apply_button);

                //Set Refresh button
                let refresh_button = $(`<button class="btn btn-success refresh-setting">Refresh</button>`).on('click', async function (e) {
                    log("Refreshing...");
                    //$(".devicelist").empty();
                    await getDevices(); 
                    isSettingVisible = false;
                    $(".settings").click();
					log("Setting refreshed.");
                });
                $(".devicelist").append(refresh_button);

                $(".devicelist").show();
                isSettingVisible = true;
            }
        }
        


       
    });
    //Basic
    $(".logclean").click(function () {

        $(".log").empty();

    });

	function uuidv4() {
	  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
		(c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
	  );
	}

    function log(message, id = 0) {
        //console.log(message);
        if (id > 0) {

            //clear log for each 100 request
            if (!(id % 50)) {
                $(".log").empty();
            }

            if ($(".log").find(`#${id}`).length) {

                //console.log("div found");
                $(".log").find(`#${id}`).text(message);
            }
            else {

                $(".log").append(`<div id="${id}">${message}</div>`);
            }

        }
        else {
            $(".log").append(`<div>${message}</div>`);
        }

    }

    async function getDevices(){

        var devices = await navigator.mediaDevices.enumerateDevices();
        if (devices.length) {
            $.each(devices, function (key, device) {
                //console.log(JSON.stringify(device))
                switch (device.kind) {
                    case "videoinput":
                        cameraList.push({ id: device.deviceId, label: device.label });
                        break;
                    case "audioinput":
                        micList.push({ id: device.deviceId, label: device.label });
                        break;
                }
            });

            if (cameraList.length == 1) {
                selected_camera = cameraList[0];
            }
            if (micList.length == 1) {
                selected_mic = micList[0];
            }
        }
    }

    $(document).ready(async function () {
		
        $(".logclean").hide();

		$(".start-camera").show();
		$(".start-record").hide();
		$(".stop-record").hide();
       await getDevices();

        console.log(selected_camera);
    });
</script>