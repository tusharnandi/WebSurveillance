@page
@model VideoApp.Pages.RecoderModel
@{
    ViewData["Title"] = "Recorder page";
}

<h1>Recorder</h1>
<button id="start-camera">Start Camera</button>
<video id="video" width="880" height="520" autoplay controls muted></video>
<button id="start-record">Start Recording</button>
<button id="stop-record">Stop Recording</button>
<a id="download-video" download="test.webm">Download Video</a>

<script>

let camera_button = document.querySelector("#start-camera");
let video = document.querySelector("#video");
let start_button = document.querySelector("#start-record");
let stop_button = document.querySelector("#stop-record");
let download_link = document.querySelector("#download-video");

let rq = "@Model.Id";
let streaming_server_url = "@Model.StreamServerURL";
let camera_stream = null;
let media_recorder = null;
let blobs_recorded = [];

let is_first_data = false;
let is_last_data = false;
let data_sequence = 0;
let recording_count = 0;

camera_button.addEventListener('click', async function() {
    try {
    camera_stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    }
    catch(error) {
    alert(error.message);
    return;
    }

    video.srcObject = camera_stream;
    camera_button.style.display = 'none';
    video.style.display = 'block';
    start_button.style.display = 'block';
});

start_button.addEventListener('click', function() {
    media_recorder = new MediaRecorder(camera_stream, { mimeType: 'video/webm' });

    media_recorder.addEventListener('dataavailable', function(e) {
       
        data_sequence++;
        //blobs_recorded.push(e.data);

        //Push data to Server
        pushToServer(recording_count,e.data,data_sequence,is_first_data,is_last_data);

        if (is_first_data == true) {
             is_first_data = false;
        }
        if (is_last_data==true) {
            is_last_data = false;
        }

    });

    media_recorder.addEventListener('stop', function() {
       
    //let video_local = URL.createObjectURL(new Blob(blobs_recorded, { type: 'video/webm' }));
    //download_link.href = video_local;

        stop_button.style.display = 'none';
        //download_link.style.display = 'block';
        start_button.style.display = 'block';
       
    });

    media_recorder.addEventListener('start', function() {
       
        is_first_data = true;
        is_last_data = false;
        recording_count++;

        start_button.style.display = 'none';
        stop_button.style.display = 'block';
       
    });
    media_recorder.start(5*1000);
   
});

stop_button.addEventListener('click', function() {
    is_last_data = true;
media_recorder.stop();
});

function pushToServer(attempt,data,seq,isfirst,islast) {
   
    console.log(`Sending  seq:${seq} isFirst: ${isfirst} isLast:${islast}...!`);
    let queryString =`rq=${rq}&isfirst=${isfirst}&islast=${islast}&seq=${seq}&attempt=${attempt}`;
 

    fetch(`${streaming_server_url}/upload?${queryString}`, {
        method: "POST",
        body: data,
        headers: {
            "Content-Type": "multipart/form-data"
        },
        allowHTTP1ForStreamingUpload:true
    });

    //blobs_recorded.push(e.data);


    console.log(`Sent seq:${data_sequence} complete!`);
}

</script>
